{
  "name": "github-repository-manager",
  "version": "1.7.0",
  "publisher": "henriqueBruno",
  "displayName": "GitHub Repository Manager",
  "description": "Easily and quickly clone and access your GitHub repositories and create new ones",
  "author": {
    "name": "Henrique Bruno",
    "email": "henrique.bruno.fa@gmail.com"
  },
  "main": "./dist/extension.js",
  "engines": {
    "vscode": "^1.94.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/SrBrahma/GitHub-Repository-Manager"
  },
  "bugs": {
    "url": "https://github.com/SrBrahma/GitHub-Repository-Manager/issues"
  },
  "icon": "images/logo/logo128.png",
  "scripts": {
    "typecheck": "tsc --noEmit",
    "typecheck:watch": "tsc --noEmit --watch",
    "format": "biome check --write --unsafe src && eslint --fix src",
		"format:check": "biome check src && eslint src",
    "=== using pnpm ===": "https://github.com/microsoft/vscode-vsce/issues/421#issuecomment-1038911725",
    "esbuild:base": "esbuild ./src/main/index.ts --bundle --outfile=dist/extension.js --external:vscode --format=cjs --platform=node",
    "esbuild:watch": "pnpm esbuild:base --watch",
    "vscode:prepublish": "pnpm esbuild:base --minify",
    "package": "vsce package --no-dependencies",
    "publish": "vsce publish --no-dependencies",
    "watch": "run-p esbuild:watch typecheck:watch",
    "start": "pnpm watch"
  },
  "categories": [
    "Other",
    "SCM Providers"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "license": "MIT",
  "keywords": [
    "github",
    "repository",
    "manager",
    "repo",
    "git"
  ],
  "prettier": "prettier-config-gev",
  "dependencies": {
    "@octokit/core": "6.1.2",
    "@octokit/rest": "21.0.2",
    "@vscode/vsce": "^3.1.1",
    "execa": "9.4.0",
    "fs-extra": "11.2.0",
    "git-url-parse": "15.0.0",
    "globby": "14.0.2"
  },
  "devDependencies": {
    "@biomejs/biome": "^1.9.3",
    "@types/fs-extra": "11.0.4",
    "@types/git-url-parse": "^9.0.3",
    "@types/node": "^22.7.4",
    "@types/vscode": "1.94.0",
    "esbuild": "0.24.0",
    "eslint-config-gev": "4.5.1",
    "npm-run-all": "4.1.5",
    "typescript": "~5.4.0"
  },
  "contributes": {
    "colors": [
      {
        "id": "githubRepositoryManager.private",
        "description": "Color for private repositories icons in the tree view.",
        "defaults": {
          "dark": "#d4c964",
          "light": "#d4c964",
          "highContrast": "contrastBorder"
        }
      },
      {
        "id": "githubRepositoryManager.public",
        "description": "Color for private repositories icons in the tree view.",
        "defaults": {
          "dark": "#7bbb7b",
          "light": "#7bbb7b",
          "highContrast": "contrastBorder"
        }
      },
      {
        "id": "githubRepositoryManager.fork",
        "description": "Color for private repositories icons in the tree view.",
        "defaults": {
          "dark": "#64c8e9",
          "light": "#64c8e9",
          "highContrast": "contrastBorder"
        }
      },
      {
        "id": "githubRepositoryManager.remote",
        "description": "Color for local repositories that user isn't owner or part of that organization",
        "defaults": {
          "dark": "#096884",
          "light": "#096884",
          "highContrast": "contrastBorder"
        }
      }
    ],
    "configuration": {
      "title": "GitHub Repository Manager",
      "properties": {
        "githubRepositoryManager.alwaysCloneToDefaultDirectory": {
          "type": "boolean",
          "default": false,
          "description": "Always clone to the directory specified in \"git.defaultCloneDirectory\"."
        },
        "githubRepositoryManager.defaultCloneDirectoryMaximumDepth": {
          "minimum": 0,
          "default": 2,
          "type": "integer",
          "description": "How deep on \"git.defaultCloneDirectory\" the cloned repositories will be searched. A depth of 0 means it will only search in the directory itself, a depth of 3 means it will search up to 3 directories below."
        },
        "githubRepositoryManager.directoriesToIgnore": {
          "type": "array",
          "default": [
            "node_modules",
            ".vscode",
            ".git/*",
            "logs",
            "images",
            "src",
            "lib",
            "out",
            "build",
            "etc",
            "public"
          ],
          "description": "Directories names that our cloned repositories searcher will ignore."
        }
      }
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "githubRepoMgr",
          "title": "GitHub Repository Manager",
          "icon": "images/logo/logoVS.png"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "githubRepoMgr.views.account",
        "contents": "You are not yet logged in\n[Login with your GitHub account](command:githubRepoMgr.commands.auth.vscodeAuth)",
        "when": "githubRepoMgr.userState == 'notLogged'"
      }
    ],
    "views": {
      "githubRepoMgr": [
        {
          "id": "githubRepoMgr.views.account",
          "name": "Account"
        },
        {
          "id": "githubRepoMgr.views.repositories",
          "name": "Repositories"
        }
      ]
    },
    "commands": [
      {
        "title": "Create Repository",
        "command": "githubRepoMgr.commands.repos.createRepo",
        "icon": "$(repo-create)"
      },
      {
        "title": "Create Repository for Current Project",
        "command": "githubRepoMgr.commands.repos.publish",
        "icon": "$(repo-push)"
      },
      {
        "title": "Reload Repositories",
        "command": "githubRepoMgr.commands.repos.reload",
        "icon": "$(refresh)"
      },
      {
        "command": "githubRepoMgr.commands.repos.openWebPage",
        "title": "Open GitHub Page",
        "icon": "$(globe)"
      },
      {
        "command": "githubRepoMgr.commands.repos.copyRepositoryUrl",
        "title": "Copy Repository URL"
      },
      {
        "command": "githubRepoMgr.commands.clonedRepos.open",
        "title": "Open"
      },
      {
        "command": "githubRepoMgr.commands.clonedRepos.openInNewWindow",
        "title": "Open in New Window",
        "icon": "$(multiple-windows)"
      },
      {
        "command": "githubRepoMgr.commands.clonedRepos.addToWorkspace",
        "title": "Add to Workspace"
      },
      {
        "command": "githubRepoMgr.commands.clonedRepos.openContainingFolder",
        "title": "Open Containing Folder",
        "icon": "$(symbol-folder)"
      },
      {
        "command": "githubRepoMgr.commands.clonedRepos.copyPath",
        "title": "Copy Path"
      },
      {
        "command": "githubRepoMgr.commands.notClonedRepos.cloneTo",
        "title": "Clone to"
      },
      {
        "command": "githubRepoMgr.commands.clonedRepos.setAsFavorite",
        "title": "Set as Favorite",
        "icon": "$(star)"
      },
      {
        "command": "githubRepoMgr.commands.clonedRepos.setAsFavorite",
        "title": "Unset as Favorite",
        "icon": "$(star-full)"
      },
      {
        "command": "githubRepoMgr.commands.clonedRepos.delete",
        "title": "Delete"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "githubRepoMgr.commands.repos.publish",
          "when": "view == githubRepoMgr.views.repositories && githubRepoMgr.userState == 'logged' && githubRepoMgr.canPublish == true",
          "group": "navigation@1"
        },
        {
          "command": "githubRepoMgr.commands.repos.createRepo",
          "when": "view == githubRepoMgr.views.repositories && githubRepoMgr.userState == 'logged'",
          "group": "navigation@2"
        },
        {
          "command": "githubRepoMgr.commands.repos.reload",
          "when": "view == githubRepoMgr.views.repositories && githubRepoMgr.userState == 'logged'",
          "group": "navigation@3"
        }
      ],
      "view/item/context": [
        {
          "command": "githubRepoMgr.commands.repos.openWebPage",
          "when": "viewItem =~ /githubRepoMgr\\.context\\.(not)?clonedRepo/i",
          "group": "9@0"
        },
        {
          "command": "githubRepoMgr.commands.repos.copyRepositoryUrl",
          "when": "viewItem =~ /githubRepoMgr\\.context\\.(not)?clonedRepo/i",
          "group": "9@1"
        },
        {
          "command": "githubRepoMgr.commands.clonedRepos.open",
          "when": "viewItem == githubRepoMgr.context.clonedRepo",
          "group": "0@0"
        },
        {
          "command": "githubRepoMgr.commands.clonedRepos.openInNewWindow",
          "when": "viewItem == githubRepoMgr.context.clonedRepo",
          "group": "0@1"
        },
        {
          "command": "githubRepoMgr.commands.clonedRepos.addToWorkspace",
          "when": "viewItem == githubRepoMgr.context.clonedRepo",
          "group": "0@2"
        },
        {
          "command": "githubRepoMgr.commands.clonedRepos.openContainingFolder",
          "when": "viewItem == githubRepoMgr.context.clonedRepo",
          "group": "1@0"
        },
        {
          "command": "githubRepoMgr.commands.clonedRepos.copyPath",
          "when": "viewItem == githubRepoMgr.context.clonedRepo",
          "group": "1@1"
        },
        {
          "command": "githubRepoMgr.commands.clonedRepos.delete",
          "when": "viewItem == githubRepoMgr.context.clonedRepo",
          "group": "1@2"
        },
        {
          "command": "githubRepoMgr.commands.notClonedRepos.cloneTo",
          "when": "viewItem == githubRepoMgr.context.notClonedRepo",
          "group": "0@0"
        },
        {
          "command": "githubRepoMgr.commands.clonedRepos.setAsFavorite",
          "when": "false && TODO",
          "group": "inline@0"
        },
        {
          "command": "githubRepoMgr.commands.clonedRepos.openInNewWindow",
          "when": "viewItem == githubRepoMgr.context.clonedRepo",
          "group": "inline@1"
        },
        {
          "command": "githubRepoMgr.commands.clonedRepos.openContainingFolder",
          "when": "viewItem == githubRepoMgr.context.clonedRepo",
          "group": "inline@2"
        },
        {
          "command": "githubRepoMgr.commands.repos.openWebPage",
          "when": "viewItem =~ /githubRepoMgr\\.context\\.(not)?clonedRepo/i",
          "group": "inline@5"
        }
      ]
    }
  }
}
